Compiling the library in Windows
================================

DISCLAIMER: these notes are not very reliable, as they're
based on some very simple tests, without much knowledge of
the Windows operating system.

1) Using MinGW/MSYS

Everything goes as in standard *nix systems (you should
probably change the default installation location with the
--prefix option in `configure').
With the default options, the `configure' sctipt produces a
DLL.  If you want to build a static library, you should pass the
options --disable-shared and --disable-declspec to
`configure', and make sure you define the preprocessor
LQR_DISABLE_DECLSPEC whenever you want to compile/link
against the static library.

2) Using MS Visual C++

The library compiles at least under `Microsoft Visual C++
2008 Express edition'. You can create an empty DLL project
with the default setup (choose Console Application then
Advanced Settings -> DLL + Empty Project), then put the
`lqr' directory in the project directory and add all of the
files within that dir to the project with `Add Exisitng
Item'.  Then, you must modify the project properties like
this:

  a) C/C++ -> General -> Additional Include Directories: add
  the directory `lqr' and its parent, and also the directory
  where all the necessary glib-2.0 headers are found.

  b) C/C++ -> Preprocessor -> Preprocessor Definitions: add
  LQR_EXPORT to the list

  c) C/C++ -> Advanced -> Compile As: Compile as C Code (it
  also works otherwise, but this option seems to make sense
  given that the library is ANSI C)

  d) Linker -> General -> Version: set version (don't know
  if this is really needed or has any purpose at all though)

  e) Linker -> Additional Library Directories: add the
  directory where glib-2.0.lib is found

  f) Linker -> Input -> Additional Dependencies: add
  glib-2.0.lib

When you build the project, it should produce the library
liblqr-1-0.lib and liblqr-1-0.dll files (assuming your
project is called `liblqr-1-0').
